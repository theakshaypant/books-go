// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/book/book.proto

package book

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Book struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Revision             int32    `protobuf:"varint,2,opt,name=Revision,proto3" json:"Revision,omitempty"`
	ISBN                 string   `protobuf:"bytes,3,opt,name=ISBN,proto3" json:"ISBN,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Author               string   `protobuf:"bytes,5,opt,name=Author,proto3" json:"Author,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f1de4638ef386b, []int{0}
}

func (m *Book) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Book.Unmarshal(m, b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Book.Marshal(b, m, deterministic)
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return xxx_messageInfo_Book.Size(m)
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Book) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Book) GetISBN() string {
	if m != nil {
		return m.ISBN
	}
	return ""
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f1de4638ef386b, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Book)(nil), "book.Book")
	proto.RegisterType((*Empty)(nil), "book.Empty")
}

func init() { proto.RegisterFile("pkg/book/book.proto", fileDescriptor_86f1de4638ef386b) }

var fileDescriptor_86f1de4638ef386b = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0xcd, 0x9a, 0x8d, 0x3a, 0x82, 0x87, 0x51, 0x24, 0xf4, 0x54, 0xd2, 0x4b, 0x4f, 0x55,
	0xf4, 0x09, 0x2c, 0xf1, 0x90, 0x8b, 0x87, 0xf5, 0xcf, 0x7d, 0x8b, 0x41, 0xc3, 0xd6, 0x4e, 0xd8,
	0x8e, 0x8a, 0xef, 0xe7, 0x83, 0xc9, 0x4e, 0x44, 0xda, 0x8b, 0xbd, 0x84, 0xf9, 0x7d, 0xf9, 0x91,
	0x7c, 0x0c, 0x9c, 0xe6, 0xee, 0xe5, 0x62, 0x41, 0xd4, 0xc9, 0x31, 0xcb, 0x3d, 0x31, 0xa1, 0x1e,
	0x66, 0xc7, 0xa0, 0xe7, 0x44, 0x1d, 0x9e, 0x40, 0x15, 0xbc, 0x55, 0x63, 0x35, 0xad, 0x9b, 0x2a,
	0x78, 0x1c, 0xc1, 0x61, 0x13, 0x3f, 0xd2, 0x3a, 0xd1, 0xca, 0x56, 0x92, 0xfe, 0x31, 0x22, 0xe8,
	0x70, 0x3f, 0xbf, 0xb3, 0xfb, 0x63, 0x35, 0x3d, 0x6a, 0x64, 0xc6, 0x33, 0xa8, 0x1f, 0x12, 0x2f,
	0xa3, 0xd5, 0x12, 0x16, 0xc0, 0x73, 0x30, 0x37, 0xef, 0xfc, 0x4a, 0xbd, 0xad, 0x25, 0xfe, 0x25,
	0x77, 0x00, 0xf5, 0xed, 0x5b, 0xe6, 0xaf, 0xab, 0x6f, 0x05, 0xf0, 0x98, 0x9f, 0x5b, 0x8e, 0xbe,
	0xe5, 0x16, 0x27, 0xa0, 0x9f, 0x52, 0xfc, 0xc4, 0xe3, 0x99, 0x14, 0x15, 0x67, 0x04, 0x05, 0x86,
	0x9a, 0x6e, 0xef, 0x52, 0xa1, 0x03, 0x33, 0x48, 0xc1, 0xe3, 0xc6, 0xcd, 0xb6, 0x85, 0x13, 0x30,
	0x61, 0xb5, 0x8e, 0x3d, 0x6f, 0x39, 0x9b, 0xcf, 0x16, 0xa9, 0xfc, 0xbd, 0x43, 0xf2, 0x71, 0x19,
	0xff, 0x95, 0x16, 0x46, 0x56, 0x7a, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x4f, 0x2a, 0xa4,
	0x69, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateDataClient is the client API for UpdateData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateDataClient interface {
	View(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UpdateData_ViewClient, error)
	ViewID(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
}

type updateDataClient struct {
	cc *grpc.ClientConn
}

func NewUpdateDataClient(cc *grpc.ClientConn) UpdateDataClient {
	return &updateDataClient{cc}
}

func (c *updateDataClient) View(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UpdateData_ViewClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpdateData_serviceDesc.Streams[0], "/book.UpdateData/View", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateDataViewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateData_ViewClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type updateDataViewClient struct {
	grpc.ClientStream
}

func (x *updateDataViewClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *updateDataClient) ViewID(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/book.UpdateData/ViewID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateDataClient) Insert(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book.UpdateData/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateDataClient) Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book.UpdateData/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateDataClient) Delete(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/book.UpdateData/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateDataServer is the server API for UpdateData service.
type UpdateDataServer interface {
	View(*Empty, UpdateData_ViewServer) error
	ViewID(context.Context, *Book) (*Book, error)
	Insert(context.Context, *Book) (*Empty, error)
	Update(context.Context, *Book) (*Empty, error)
	Delete(context.Context, *Book) (*Empty, error)
}

// UnimplementedUpdateDataServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateDataServer struct {
}

func (*UnimplementedUpdateDataServer) View(req *Empty, srv UpdateData_ViewServer) error {
	return status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedUpdateDataServer) ViewID(ctx context.Context, req *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewID not implemented")
}
func (*UnimplementedUpdateDataServer) Insert(ctx context.Context, req *Book) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedUpdateDataServer) Update(ctx context.Context, req *Book) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUpdateDataServer) Delete(ctx context.Context, req *Book) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterUpdateDataServer(s *grpc.Server, srv UpdateDataServer) {
	s.RegisterService(&_UpdateData_serviceDesc, srv)
}

func _UpdateData_View_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateDataServer).View(m, &updateDataViewServer{stream})
}

type UpdateData_ViewServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type updateDataViewServer struct {
	grpc.ServerStream
}

func (x *updateDataViewServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _UpdateData_ViewID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDataServer).ViewID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.UpdateData/ViewID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDataServer).ViewID(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateData_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDataServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.UpdateData/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDataServer).Insert(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateData_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDataServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.UpdateData/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDataServer).Update(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateData_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateDataServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.UpdateData/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateDataServer).Delete(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.UpdateData",
	HandlerType: (*UpdateDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewID",
			Handler:    _UpdateData_ViewID_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _UpdateData_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UpdateData_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UpdateData_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "View",
			Handler:       _UpdateData_View_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/book/book.proto",
}
